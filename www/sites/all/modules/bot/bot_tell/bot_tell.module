<?php
// $Id: bot_tell.module,v 1.1.2.10.2.2 2010/12/28 13:28:14 morbus Exp $

/**
 * @file
 * Enables queued messages for unavailable users.
 */

/**
 * Implements hook_help().
 */
function bot_tell_help($path, $arg) {
  switch ($path) {
    case 'irc:features':
      return array(t('Reminders'), t('Tell'));
    case 'irc:features#reminders':
      return t('Reminders can be set with "BOTNAME: remind NICK (at|by|in|on) DURATION (about|how|that|to) MESSAGE". For example: "BOTNAME: remind Morbus in 1 hour and 6 minutes that his bot is awesome", "BOTNAME: remind me in 23 minutes to check my pot roast.", or even "BOTNAME: remind Monty on Wed, 12 May 2010 13:10:21 -0400 that this was when this code debuted."');
    case 'irc:features#tell':
      return t('Queue messages with "BOTNAME: tell Morbus that his bot_module help messages are awesome." Queued messages will be delivered publicly when the recipient sends a message to the channel.');
  }
}

/**
 * Implements hook_irc_bot_cron().
 */
function bot_tell_irc_bot_cron_fastest() {
  // look for futurestamped messages that need to be delivered.
  $results = db_query_range("SELECT * FROM {bot_tell_queue} WHERE futurestamp != 0 AND futurestamp <= :time ORDER BY timestamp ASC", 0, 3, array(':time' => time()));
  foreach ($results as $result) { // deliver up to three at at a time to prevent flooding.
    $message = t('!recipient: !author asked me to remind you !message', array(
      '!recipient'  => $result->recipient, // sending to yourself? you're a You, punk.
      '!author'     => ($result->recipient == $result->author) ? 'You' : $result->author,
      '!message'    => $result->message,
    ));

    bot_message($result->future_to, $message); // PING! PIIiIiiINnNGGG!
    db_delete('bot_tell_queue')->condition('mid', $result->mid)->execute();
  }
}

/**
 * Listen for conversation directed at, or about, the bot.
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_tell_irc_msg_channel($data, $from_query = FALSE) {
  $to = $from_query ? $data->nick : $data->channel;
  $addressed = bot_name_regexp();

  // check for existing messages.
  $messages = bot_tell_load($data->nick);
  if (!empty($messages)) { // mmMMmMMm.
    foreach ($messages as $message) {
      bot_message($to, t('!recipient: !timestamp ago <!author> !message', array(
        '!recipient'  => $data->nick, // use their case, not author's.
        '!timestamp'  => format_interval(time() - $message->timestamp),
        '!author'     => $message->author,
        '!message'    => $message->message,
      )));
    }

    // remove queued messages.
    bot_tell_delete($data->nick);
  }

  // check for tells to queue up.
  if (preg_match("/^($addressed)tell\s+([a-zA-Z0-9\[\]\{\}\\\|\^\`\-\_\*]*)[:;,]?\s+(.*)$/i", $data->message, $matches)) {

    // if bot_factoid.module is enabled, we'll check to see if this could be about a factoid.
    // if it is, we'll let bot_factoid handle it and skip over this message's processing here.
    // @todo ideally, this would be smoother with http://drupal.org/node/218595.
    if (module_exists('bot_factoid') && drupal_substr($matches[4], 0, 5) == 'about' && $factoid = bot_factoid_load(drupal_substr($matches[4], 6))) {
      return; // we're just not gonna do anything with this particular message cos bot_factoid will gladly take over the response.
    }

    // queued message accepted, keptin.
    bot_tell_save($data->nick, $matches[3], preg_replace("/^($addressed)\s*/", '', $data->message)); // see that? it's saved! in one line!
    bot_message($to, t("!nick: I'll pass that on when !recipient is around.", array('!nick' => $data->nick, '!recipient' => $matches[3])));
  }

  // check for reminders to deliver in the future.
  if (preg_match("/^($addressed)remind\s+([a-zA-Z0-9\[\]\{\}\\\|\^\`\-\_\*]*)\s+(at|by|on|in)\s+(.*?)\s+((about|how|that|to).*)$/i", $data->message, $matches)) {
    $recipient    = $matches[3] == 'me' ? $data->nick : $matches[3];
    $future_to    = $from_query ? $recipient : $data->channel; // deliver where?
    $futurestamp  = strtotime(str_replace(' and ', ' ', $matches[5]));

    if (!$futurestamp) { // what crazy crap did you send me?!
      return bot_message($to, 'Unknown or bad time format.');
    }

    // we've got a working futurestamp and all that other jazz, so save it.
    bot_tell_save($data->nick, $recipient, $matches[6], $futurestamp, $future_to);

    // future message accepted, keptin.
    $recipient    = $matches[3] == 'me' ? 'you' : $matches[3];
    $futurestamp  = date(DATE_RFC2822, $futurestamp);
    bot_message($to, t("!nick: I'll remind !recipient about that on !futurestamp.",
      array('!nick' => $data->nick, '!recipient' => $recipient, '!futurestamp' => $futurestamp)));
  }
}

/**
 * All responses are available via a query.
 */
function bot_tell_irc_msg_query($data) {
  bot_tell_irc_msg_channel($data, TRUE);
}

/**
 * Deletes queued messages for the given recipient.
 *
 * @param $recipient
 *   The recipient whose messages are being deleted.
 */
function bot_tell_delete($recipient) {
  db_delete('bot_tell_queue')->condition('recipient', db_like($recipient), 'LIKE')->execute();
  bot_tell_pending_cache($recipient, 'delete'); // maintain static cache to reduce db queries.
}

/**
 * Retrieves queued messages for the given recipient.
 *
 * @param $recipient
 *   The recipient whose messages are being loaded.
 * @return
 *   An array of all messages for the recipient.
 */
function bot_tell_load($recipient) {
  $messages = array();

  if (bot_tell_pending_cache($recipient)) {
    // we only get messages that have no futurestamp (i.e., "deliver immediately"). futurestamps are checked in cron only.
    $results = db_query("SELECT * FROM {bot_tell_queue} WHERE recipient LIKE :recipient AND futurestamp = 0 ORDER BY timestamp ASC", array(':recipient' => $recipient));

    foreach ($results as $result) {
      $messages[] = $result;
    }
  }

  return $messages;
}

/**
 * Saves a queued message to be sent later.
 *
 * @param $author
 *   The IRC user that is writing this message to the recipient.
 * @param $recipient
 *   The IRC user who is to be delivered the message.
 * @param $message
 *   The message to be delivered to the recipient.
 * @param $futurestamp
 *   If a reminder, the timestamp to deliver the message.
 * @param $future_to
 *   If a reminder, the location to deliver the message.
 */
function bot_tell_save($author, $recipient, $message, $futurestamp = 0, $future_to = NULL) {
  $tell = new stdClass();
  $tell->author       = $author;
  $tell->recipient    = $recipient;
  $tell->message      = $message;
  $tell->timestamp    = time();
  $tell->futurestamp  = $futurestamp;
  $tell->future_to    = $future_to;
  drupal_write_record('bot_tell_queue', $tell);

  if (!$futurestamp) { // only cache immediates.
    bot_tell_pending_cache($recipient, 'insert');
  }
}

/**
 * Maintain a list of recipients with waiting messages.
 *
 * This function primarily exists to ensure that we're not running a SELECT
 * on every message that the bot receives. The static cache is maintained by
 * bot_tell_delete() and bot_tell_save(), and checked with bot_tell_load().
 *
 * @param $recipient
 *   The IRC user we're checking for pending messages for.
 * @param $op
 *   Optional; whether $recipient should be inserted to or deleted from cache.
 */
function bot_tell_pending_cache($recipient, $op = NULL) {
  static $pending;

  if (!is_array($pending)) {
    $results = db_query('SELECT DISTINCT(recipient) FROM {bot_tell_queue}');
    foreach ($results as $result) { // do you feel smaller, nick? DO YOU!?!
      $pending[drupal_strtolower($result->recipient)] = 1;
    }
  }

  $recipient = drupal_strtolower($recipient);
  if ($op == 'insert' && !isset($pending[$recipient])) {
    $pending[$recipient] = 1;
  }

  if ($op == 'delete' && isset($pending[$recipient])) {
    unset($pending[$recipient]);
  }

  return isset($pending[$recipient]);
}

<?php
// $Id: bot_factoid.module,v 1.1.2.6.2.18.2.5 2010/12/29 12:42:45 morbus Exp $

/**
 * @file
 * Enables the setting and retrieval of facts.
 */

/**
 * Implements hook_help().
 */
function bot_factoid_help($path, $arg) {
  switch ($path) {
    case 'irc:features':
      return array(t('Factoids'));
    case 'irc:features#factoids':
      return t('Set factoids with "BOTNAME: Drupal is great.", "No, BOTNAME, cats are furry.", "BOTNAME: Drupal is also powerful.", "BOTNAME: cheer is <action>cheers for !who in !channel!", or "BOTNAME: ping is <reply>WHAT?!". Retrieve with "Drupal?" or "BOTNAME: cheer!" Forget with "BOTNAME: forget ping". PM with "BOTNAME: tell newb about support". Browsable at <!url>.', array('!url' => url('bot/factoid', array('absolute' => TRUE))));
    case 'bot/factoid':
      return '<p>' . t('Browse all the factoids the bot knows about.') . '</p>';
    case 'admin/settings/bot/factoid':
      return '<p>' . t('Configure factoid learning with these settings.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function bot_factoid_menu() {
  $items['bot/factoid'] = array(
    'access arguments'  => array('access bot factoids'),
    'description'       => "Browse all the factoids the bot knows about.",
    'page callback'     => 'bot_factoid_overview',
    'title'             => 'Factoids',
  );
  $items['admin/config/bot/factoid'] = array(
    'access arguments'  => array('administer bot'),
    'description'       => 'Configure factoid learning with these settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bot_factoid_settings'),
    'title'             => 'Bot Factoid',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bot_factoid_permission() {
  return array(
    'access bot factoids' => array(
      'title' => t('Access bot factoids'),
    ),
  );
}

/**
 * Browse all the factoids the bot knows about.
 */
function bot_factoid_overview() {
  $rows = array(); // storage of awesomeness.
  $query = db_select('bot_factoid', 'bf')->extend('PagerDefault');
  $results = $query->fields('bf', array('subject', 'is_are', 'statement'))->orderBy('subject')->limit(25)->execute();

  foreach ($results as $result) {
    $rows[] = array(
      array('data' => check_plain($result->subject), 'class' => 'subject'),
      array('data' => check_plain($result->is_are), 'class' => 'is_are'),
      array('data' => check_plain($result->statement), 'class' => 'statement')
    );
  }

  $build['bot_factoid_list'] = array(
    '#theme'      => 'table',
    '#header'     => array(t('Subject'), t('Is/Are'), t('Statement')),
    '#rows'       => $rows,
    '#attributes' => array('id' => 'bot-factoid-list'),
    '#empty'      => t('No factoids are available.'),
  );
  $build['bot_factoid_pager'] = array('#theme' => 'pager');

  return $build;
}

/**
 * Listen for conversation directed at, or about, the bot.
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_factoid_irc_msg_channel($data, $from_query = FALSE) {
  $to = $from_query ? $data->nick : $data->channel;
  $addressed = bot_name_regexp();

  // look for factoids to answer wherever we can.
  if (preg_match("/^($addressed)?(.*)[!\?]+$/i", $data->message, $matches)) {

    // "BOTNAME?" fails as a factoid. this fixes it.
    $subject = $matches[3] ? $matches[3] : $matches[2];
    $factoid = bot_factoid_load($subject, $data);
  }

  // allow "tell <nick> about <subject>" private messaging.
  if (preg_match("/^($addressed)tell ([a-zA-Z0-9\[\]\{\}\\\|\^\`\-\_\*]*)( about)? (.*)$/i", $data->message, $matches)) {
    $factoid = bot_factoid_load($matches[5]);
    $to = $matches[3]; // specified user.
  }

  // a known factoid was requested...
  if (isset($factoid)) { // so spit it to $to. pwease.
    if (preg_match("/^\/me /", $factoid['result'])) {
      bot_action($to, str_replace('/me ', '', $factoid['result']));
    }
    else { // not an action? boring old message. yawn.
      bot_message($to, $factoid['result']);
    }

    return; // no further processing, thanks.
  }

  // @todo allow subject searching and return list of subjects that match?

  // look for factoids to delete.
  if (preg_match("/^($addressed)forget( about)? (.*)$/i", $data->message, $matches)) {
    bot_factoid_delete($matches[4]); // good night, sweetheart. baaah dum dum dum. it's time to GoOoOooOOoo.
    bot_message($to, t("!nick: I've forgotten about !subject.", array('!nick' => $data->nick, '!subject' => $matches[4])));
  } // @todo delete message should be customizable. this one sucks.

  // look for factoids to learn.
  if (bot_factoid_save($data->message)) {
    bot_message($to, t("!nick: Okay.", array('!nick' => $data->nick)));
    // @todo success message should be customizable. "Okay." sucks.
  }
}

/**
 * All responses are available via a query.
 */
function bot_factoid_irc_msg_query($data) {
  bot_factoid_irc_msg_channel($data, TRUE);
}

/**
 * Delete a factoid.
 *
 * @param $subject
 *   The subject you'd like to delete.
 */
function bot_factoid_delete($subject) {
  if (!$subject) { return 0; } // why do you not send me a subject? Reap, reap, reap!
  db_delete('bot_factoid')->condition('subject', db_like($subject) . '%', 'LIKE')->execute();
}

/**
 * Retrieve a factoid.
 *
 * Subjects can have multiple statements. We do NOT check_plain() this
 * return string, since we expect it will be spit verbatim to IRC. If
 * you plan to use this elsewhere, use check_plain(), kthx.
 *
 * @param $subject
 *   The subject you'd like to fetch factoids for.
 * @param $irc_data
 *   The regular $data object prepared by the IRC library. Used to
 *   perform substitutions for "!who" (the nick asking for the factoid)
 *   and "!channel" (the channel the factoid is asked in.)
 * @return $factoid
 *   An object containing 'subject' (string), 'is_are' (string),
 *   'statements' (array) and 'result' (string). The 'result' is
 *   the logical processing of the individual parts and should be
 *   ready for sending.
 */
function bot_factoid_load($subject, $data = NULL) {
  $factoid = array('statements' => array());
  $is_are_counts = array('is' => 0, 'are' => 0);

  $results = db_query("SELECT is_are, statement FROM {bot_factoid} WHERE subject LIKE :subject", array(':subject' => db_like($subject)));
  foreach ($results as $result) { // Morbus flings his own poo. Not at people. But at glassware. GLASSSWARE! (And occasionally recyclable plastics.)
    if (strpos($result->statement, '<reply>') !== FALSE)  { $factoid['has_reply'] = 1; }
    if (strpos($result->statement, '<action>') !== FALSE) { $factoid['has_action'] = 1; }

    if ($data) { // if the irc object is here, try for some substitutions.
      $substitutions = array('!who' => $data->nick, '!channel' => $data->channel);
      $result->statement = strtr($result->statement, $substitutions);
    }

    $factoid['statements'][] = $result->statement;
    $is_are_counts[$result->is_are]++;
  }

  // got facts?
  if (count($factoid['statements'])) {
    $factoid['subject'] = $subject;

    // @todo support one|two|three as a random response syntax.

    // if a subject has multiple statements, we can't knowingly pick the
    // best $is_are, so we'll choose whichever one has the most matches.
    $factoid['is_are'] = $is_are_counts['are'] > $is_are_counts['is'] ? 'are' : 'is';

    // generate the final result. we try our hardest to make a final result for
    // ready printing, but the ability to have multiple statements per subject,
    // and multiple TYPES of statements (<action> and <reply>), causes complexities.
    // we'll do what we can with the result, and munge it for any other case.
    if (!isset($factoid['has_reply']) && !isset($factoid['has_action']) || (count($factoid['statements']) > 1 && (isset($factoid['has_reply']) || isset($factoid['has_action'])))) {
      // if we've got no actions and no replies, or we have actions and replies but more than one easy-to-logic statements, we'll just spit 'em verbatim. too confusing otherwise.
      $factoid['result'] = "$factoid[subject] $factoid[is_are] ". implode(" and $factoid[is_are] also ", $factoid['statements']);
    }
    elseif (isset($factoid['has_reply']) && count($factoid['statements']) == 1) {
      $factoid['result'] = str_replace('<reply>', '', array_shift($factoid['statements']));
    }
    elseif (isset($factoid['has_action']) && count($factoid['statements']) == 1) {
      $factoid['result'] = str_replace('<action>', '/me ', array_shift($factoid['statements']));
    }

    return $factoid;
  }

  return NULL;
}

/**
 * Creates a factoid.
 *
 * We expect a raw string right from the IRC user - we'll handle all the
 * checks for prefacing and "no," and "also", etc. Learning factoids
 * will only happen if the bot name has been used.
 *
 * @param $string
 *   The user string that should be parsed for action.
 */
function bot_factoid_save($string) {
  $addressed = bot_name_regexp();

  // only process the string if it's one of:
  //   <Morbus> bot_module: cats are brown.
  //   <Morbus> bot_module: no, cats are blue.
  //   <Morbus> no, bot_module, cats are grey.
  //   <Morbus> bot_module: Morbus is teh awesome.
  if (preg_match("/^(no[:;,-]\s*)?$addressed/i", $string) && preg_match('/^(.*?)\s+(is|are)\s+(.*)$/i', $string, $matches)) {
    $factoid = new stdClass();
    $factoid->subject   = $matches[1];
    $factoid->is_are    = $matches[2];
    $factoid->statement = $matches[3];

    // remove "botmodule: no," and "no, bot_module".
    $factoid->subject = preg_replace("/^$addressed/i", '', $factoid->subject);
    $factoid->subject = preg_replace("/^no[:;,-]\s*($addressed)?/i", '', $factoid->subject);
    if (preg_match('/^\s*$/', $factoid->subject)) { return 0; } // stop firing blanks.

    // check that it's not one of our stopwords.
    $stopwords = array_map('trim', explode("\n", variable_get('bot_factoid_stopwords', _bot_factoid_stopwords())));
    if (in_array(drupal_strtolower($factoid->subject), array_map('drupal_strtolower', $stopwords))) {
      return 0;  // bad users deserve no feedback, so just return. UNHAPPILY.
    }

    // due to interaction with bot_tell, we need to ignore factoids that look like they
    // could be messages left for bot_tell. hardcoding sucks, but this is best for now.
    if (module_exists('bot_tell') && preg_match('/^(remind|tell) /i', $factoid->subject)) {
      return 0;
    }

    // if "also" starts the statement, we're adding.
    if (preg_match("/^also\s+/i", $factoid->statement)) {
      $factoid->statement = preg_replace("/^also\s+/i", '', $factoid->statement);
    }
    else { // get rid of existing mojo.
      bot_factoid_delete($factoid->subject);
    }

    drupal_write_record('bot_factoid', $factoid);
    return 1; // if we set something, be happy.
  }

  return 0;
}

/**
 * Configures factoid learning.
 */
function bot_factoid_settings() {
  $form['bot_factoid_stopwords'] = array(
    '#default_value' => variable_get('bot_factoid_stopwords', _bot_factoid_stopwords()),
    '#description'   => t('List the words that cannot be the subject of a factoid.'),
    '#rows'          => 15,
    '#title'         => t('Stopwords'),
    '#type'          => 'textarea',
  );

  return system_settings_form($form);
}

/**
 * Returns the default list of stopwords.
 */
function _bot_factoid_stopwords() {
  return implode("\n", array(
    'here',
    'how',
    'it',
    'something',
    'that',
    'this',
    'what',
    'when',
    'where',
    'which',
    'who',
    'why',
  ));
}

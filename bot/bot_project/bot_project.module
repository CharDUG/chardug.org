<?php
// $Id: bot_project.module,v 1.1.2.6.2.9.2.4 2010/12/29 12:42:45 morbus Exp $

/**
 * @file
 * Enables various project toolkit compatible actions.
 */

/**
 * Implements hook_help().
 */
function bot_project_help($path, $arg) {
  switch ($path) {
    case 'irc:features':
      $features = array(t('Project URLs'));
      if (module_exists('api')) {
        $features[] = t('Function Lookups');
      }
      return $features;
    case 'irc:features#project_urls':
      return t('Displays the title of project URLs; multiple URLs in a single message are acceptable. Also supports numerical IDs such as "#12345" or "4321", but only if that is the entirety of the message and the number is within a configured range. Popular and recent URLs in the past two weeks are tracked at <!url>.', array('!url' => url('bot/project_urls', array('absolute' => TRUE))));
    case 'irc:features#function_lookups':
      return t('The bot provides function lookups, triggered by "<function>?", based on the host\'s installed branches. Branches besides the default, if any, can be specified with "<function>:<branch>?".');
    case 'bot/project_urls':
      return '<p>' . t('View the most recent and popular project URLs mentioned in the IRC channels.') . '</p>';
    case 'admin/settings/bot/project':
      return '<p>' . t('Configure the project toolkit features with these settings.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function bot_project_menu() {
  $items['bot/project_urls'] = array(
    'access arguments'  => array('access bot project URLs'),
    'description'       => "View the most recent and popular URLs mentioned in the IRC channels.",
    'page callback'     => 'bot_project_urls_overview',
    'title'             => 'Project URLs',
  );
  $items['admin/config/bot/project'] = array(
    'access arguments'  => array('administer bot'),
    'description'       => 'Configure the project toolkit features with these settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bot_project_settings'),
    'title'             => 'Bot Project',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bot_project_permission() {
  return array(
    'access bot project URLs' => array(
      'title' => t('Access bot project URLs'),
    ),
  );
}

/**
 * Display top ten lists of the most recent and popular project URLs.
 */
function bot_project_urls_overview() {
  $headers = array(t('URL or Title'), t('#'), t('Last Seen'));
  drupal_add_css(drupal_get_path('module', 'bot_project') . '/bot_project.css');

  $rows = array();
  $results = db_query_range('SELECT * FROM {bot_urls} WHERE last_seen >= :last_seen ORDER BY count DESC, last_seen DESC', 0, 10, array(':last_seen' => time() - 60*60*24*14));
  foreach ($results as $result) { // NP: 'The Omen (Ave Santini) (Jerry Goldsmith)' from Various Artists's album 'Sci-Fi's Greatest Hits Vol. 2: The Dark Side'.
    $rows[] = array(array('data' => l($result->title, $result->url), 'class' => 'title'),
      array('data' => $result->count, 'class' => 'count'), array('data' => format_date($result->last_seen), 'class' => 'last_seen'));
  }
  $build["bot_project_urls_popular"] = array(
    '#theme'      => 'table',
    '#header'     => $headers,
    '#rows'       => $rows,
    '#attributes' => array('id' => "bot-project-urls-popular"),
    '#empty'      => t('No popular URLs available.'),
    '#prefix'     => '<h2>' . t('Popular project URLs in the last 14 days') . '</h2>',
  );

  $rows = array();
  $results = db_query_range('SELECT * FROM {bot_urls} ORDER BY last_seen DESC', 0, 10);
  foreach ($results as $result) { // must... fill... uncanny... whitespace... valleys...
    $rows[] = array(array('data' => l($result->title, $result->url), 'class' => 'title'),
      array('data' => $result->count, 'class' => 'count'), array('data' => format_date($result->last_seen), 'class' => 'last_seen'));
  }
  $build["bot_project_urls_recent"] = array(
    '#theme'      => 'table',
    '#header'     => $headers,
    '#rows'       => $rows,
    '#attributes' => array('id' => "bot-project-urls-recent"),
    '#empty'      => t('No popular URLs available.'),
    '#prefix'     => '<h2>' . t('Most recent project URLs') . '</h2>',
  );

  return $build;
}

/**
 * Listen for URLs or a numerical ID and respond with information about it.
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_project_irc_msg_channel($data, $from_query = FALSE) {
  $to = $from_query ? $data->nick : $data->channel;

  // ======================================================================== */
  // if api.module issue lookups are enabled...                               */
  // ======================================================================== */
  if (module_exists('api') && preg_match('/^(\w*):?([\w\-]*)\?$/', $data->messageex[0], $matches)) {
    $function_name = $matches[1]; $branch = $matches[2] ? $matches[2] : variable_get('bot_project_api_default_branch', NULL);
    if (!$function_name) { return; } // some modules have bad docs that allow "?" to match incorrectly.

    // there could be more than one result for a function lookup, so we'll load
    // them all and return only the right branch (if that's a determining factor).
    // we can't just force the branch into the SQL; too restrictive on 3+ branches.
    $results = db_query("SELECT ad.branch_name, ad.summary, af.signature FROM {api_function} af INNER JOIN {api_documentation} ad ON
      af.did = ad.did WHERE ad.object_type = 'function' AND ad.object_name = :function_name", array(':function_name' => $function_name));
    $db_functions = array(); // a master list of all the matched functions.
    foreach ($results as $result) { // look for the desired branch and...
      $db_functions[] = $result; // store the results for use as a last resort.
      if ($result->branch_name == $branch) { $function_result = $result; }
    } // no matching branch? we'll just use whatever is first in the list of all matches.
    $function_result = $function_result ? $function_result : array_shift($db_functions);
    if (!$function_result->branch_name) { return; } // no branch name == no results.

    // build up the actual message for spitting.
    if (!$function_result->summary && $function_result->branch_name != 'php') { $function_result->summary = '[There is no documentation! This is a bug. File a patch!]'; }
    if (preg_match("/\n/", $function_result->summary) && $function_result->branch_name != 'php') { $function_result->summary = '[Documented summary is not one line. This is a bug. File a patch!]'; }
    $message = $function_result->branch_name != 'php' // if we've indexed the php functions, they're in branch 'php', so we'll spit out a slightly different format.
      ? t('!function: !summary => !signature => !url', array('!function' => $function_name, '!signature' => $function_result->signature, '!summary' => $function_result->summary, '!url' => strtr(bot_project_branch_url($function_result->branch_name), array('!function' => $function_name))))
      : t('!function: !url', array('!function' => $function_name, '!url' => 'http://php.net/' . $function_name));
    bot_message($to, $message);
  }

  // ======================================================================== */
  // if project.module issue lookups are enabled...                           */
  // ======================================================================== */
  if (variable_get('bot_project_project_enable', FALSE)) {
    $urls_to_scrape = array(); // master collection.

    // looking for URLs in conversation?
    if (variable_get('bot_project_project_url_regexp', NULL)) {
      if (preg_match_all('!(' . variable_get('bot_project_project_url_regexp', '') . ')!i', $data->message, $url_matches)) {
        foreach ($url_matches[1] as $url) { $urls_to_scrape[] = $url; } // master list for scraping later.
      }
    }

    // ok, maybe just node IDs then?
    if (variable_get('bot_project_project_url', NULL)) {
      if (preg_match('/^#?(\d+)$/', $data->message, $url_matches)) {
        $nid = $url_matches[1]; // just for shorthand cos I'm lazy.
        if ($nid > variable_get('bot_project_project_nid_min', 0) && $nid < variable_get('bot_project_project_nid_max', 99999)) {
          $urls_to_scrape[] = url(variable_get('bot_project_project_url', NULL) . 'node/' . $nid, array('absolute' => TRUE));
        }
      }
    }

    // retrieve each desired URL.
    foreach ($urls_to_scrape as $url) {
      if (variable_get('bot_project_too_lazy_to_recompile_for_ssl', 0)) { $url = str_replace('https', 'http', $url); }
      // @todo I'm too lazy to recompile PHP with SSL support, and too Drupal-oriented to switch to cURL. I'm awesome.

      $result = drupal_http_request($url);
      if ($result->code != 200) { continue; }

      // we'll always display a title, so grab that first for db storage.
      preg_match('/<title>(.*?) \|.*?<\/title>/', $result->data, $title_match);
      $title = $title_match[1] ? $title_match[1] : '<' . t('unable to determine title') . '>';

      // save and set counts into message.
      $seen_count = bot_project_url_save($url, $title);
      preg_match_all('/id="comment-(\d+)/', $result->data, $comments_match);
      $comment_count = format_plural(count($comments_match[1]), '0 comments', '@count comments');
      $message = "$url => " . decode_entities($title_match[1]) . ' => ' . decode_entities(implode(', ', array($comment_count, $seen_count)));

      // get some metadata about project issue URLs. tested as of 2006-12-28.
      preg_match('/<td>Project:<\/td><td>(.*)<\/td>/', $result->data, $project_match);
      if (isset($project_match[1])) { // we'll only do further matches if this is a project.
        preg_match('/<td>Component:<\/td><td>(.*)<\/td>/', $result->data, $component_match);
        preg_match('/<td>Priority:<\/td><td>(.*)<\/td>/', $result->data, $priority_match);
        preg_match('/<td>Status:<\/td><td>(.*)<\/td>/', $result->data, $status_match);
        $message = "$url => " . decode_entities($title) . ' => ' . decode_entities(implode(', ', array($project_match[1], $component_match[1], $priority_match[1], $status_match[1], $comment_count, $seen_count)));
      }

      bot_message($to, $message);
    }
  }

  // ======================================================================== */
  // if Trac issue lookups are enabled...                                     */
  // ======================================================================== */
  if (variable_get('bot_project_trac_enable', FALSE)) {
    $urls_to_scrape = array(); // master collection.

    // looking for URLs in conversation?
    if (variable_get('bot_project_trac_url_regexp', NULL)) {
      if (preg_match_all('!(' . variable_get('bot_project_trac_url_regexp', '') . ')!i', $data->message, $url_matches)) {
        foreach ($url_matches[1] as $url) { // we need to add the format=tab to any ticket-like URLs.
          if (strpos($url, 'ticket') !== FALSE) { $url .= '?format=tab'; }
          $urls_to_scrape[] = $url; // master list for scraping later.
        }
      }
    }

    // maybe it's a numerical lookup instead...
    if (variable_get('bot_project_trac_url', NULL)) {
      if (preg_match('/^([r#])?(\d+)$/', $data->message, $url_matches)) {
        $num = $url_matches[2]; // just for shorthand cos I'm lazy.
        $type = $url_matches[1] == 'r' ? 'changeset' : 'ticket';
        $query = $url_matches[1] == 'r' ? NULL : 'format=tab'; // Trac's tab export is better than CSV (which makes , _).
        if ($num > variable_get('bot_project_trac_num_min', 0) && $num < variable_get('bot_project_trac_num_max', 99999)) {
          $urls_to_scrape[] = url(variable_get('bot_project_trac_url', NULL) . $type . '/' . $num, array('query' => $query, 'absolute' => TRUE));
        }
      }
    }

    // retrieve each desired URL.
    foreach ($urls_to_scrape as $url) {
      if (variable_get('bot_project_too_lazy_to_recompile_for_ssl', 0)) { $url = str_replace('https', 'http', $url); }
      // @todo I'm too lazy to recompile PHP with SSL support, and too Drupal-oriented to switch to cURL. I'm awesome.

      $result = drupal_http_request($url);
      if ($result->code != 200) { continue; }

      // if the URL is a tab export, it's a ticket.
      if (strpos($url, '?format=tab') !== FALSE) {
        // we can't use str_getcsv() yet, and we don't actually care about newlines
        // in the description (since the description doesn't get printed), so we'll
        // munge this export until it "works". who uses Trac anyways? heh. KIDDING.
        $lines = explode("\n", $result->data); array_shift($lines); // load, trash header.
        $ticket = explode("\t", implode('', $lines)); // back into a string and split.
        $seen_count = bot_project_url_save(str_replace('?format=tab', '', $url), $ticket[1]);

        // 0:id, 1:summary, 2:reporter, 3:owner, 4:description, 5:type, 6:status, 7:priority, 8:component, 9:resolution, 10:keywords, 11:cc
        $message = str_replace('?format=tab', '', $url) . ' => ' . decode_entities($ticket[1]) . ' => ' . implode(', ', array($ticket[2], $ticket[3], $ticket[8], $ticket[7], $seen_count));
      }
      else { // not a ticket? changeset!
        $result->data = preg_replace("/\n/", '', $result->data); // for easier grepping.
        preg_match('/<dd class="message searchable">\s*(.*?)\s*<\/dd>/', $result->data, $commit_match);
        $commit_match[1] = strip_tags($commit_match[1]); // remove any HTML autogenerated by Trac (like ticket links).
        $commit_msg = drupal_strlen($commit_match[1]) > 120 ? drupal_substr($commit_match[1], 0, 120) . '...' : $commit_match[1];

        // grab the title from the HTML and add our shortened commit message to it.
        preg_match('/<title>\s*(.*?) – .*? – Trac\s*<\/title>/', $result->data, $title_match);
        $title = $title_match[1] ? $title_match[1] : '<' . t('unable to determine title') . '>';
        $seen_count = bot_project_url_save($url, $title); // no commit_msg; tooOoO loOong.

        // and finally generate the final version of our IRC message.
        $message = "$url => " . decode_entities($commit_msg) . " => $seen_count";
      }

      bot_message($to, $message);
    }
  }
}

/**
 * All responses are available via a query.
 */
function bot_project_irc_msg_query($data) {
  bot_project_irc_msg_channel($data, TRUE);
}

/**
 * Quickie branch URL generation, without url().
 *
 * @param $branch
 *   The name of the branch to create a URL to.
 * @return $url
 *   A FQDN with %function ready to be replaced.
 */
function bot_project_branch_url($branch) {
  global $base_url; // we don't use url() so that it doesn't URL-encode the !function interpolated.
  return variable_get('bot_project_api_branch_' . $branch . '_url', $base_url . base_path() . 'api/function/!function/' . $branch);
}

/**
 * Log a URL into the database and return its seen count.
 *
 * @param $url
 *   The URL to log.
 * @param $title
 *   The title of the retrieved URL.
 * @return $count
 *   A string representing the number of times seen.
 */
function bot_project_url_save($url, $title) {
  $count = db_query("SELECT count FROM {bot_urls} WHERE url = :url", array(':url' => $url))->fetchField();
  $update = !empty($count) ? array('url') : array(); // update based on an existing and counted URL.

  $record = new stdClass();
  $record->url        = $url;
  $record->title      = decode_entities($title);
  $record->count      = !empty($count) ? ++$count : 1;
  $record->last_seen  = time();
  drupal_write_record('bot_urls', $record, $update);

  return format_plural($record->count, '1 IRC mention', '@count IRC mentions');
}

/**
 * Configures the project toolkit features.
 */
function bot_project_settings() {
  if (module_exists('api')) {
    $results = db_query('SELECT branch_name, title FROM {api_branch} ORDER BY title');
    $branches = array(); while ($result = db_fetch_object($results)) { $branches[$result->branch_name] = $result->title; }

    $form['bot_project_api'] = array(
      '#collapsible'   => TRUE,
      '#title'         => t('api.module integration'),
      '#type'          => 'fieldset',
    );
    $form['bot_project_api']['bot_project_api_default_branch'] = array(
      '#default_value' => variable_get('bot_project_api_default_branch', NULL),
      '#description'   => t('Choose the default branch that will be used for non-specific function lookups.'),
      '#options'       => $branches,
      '#title'         => t('Default API Branch'),
      '#type'          => 'select',
    );
    foreach ($branches as $branch => $title) {
      $form['bot_project_api']['bot_project_api_branch_' . $branch . '_url'] = array(
        '#default_value' => bot_project_branch_url($branch),
        '#description'   => t('Define the URL displayed in responses to this branch\'s function lookups.'),
        '#title'         => t('Function URLs for branch %name', array('%name' => $branch)),
        '#type'          => 'textfield',
      );
    }
  }

  $form['bot_project_project'] = array(
    '#collapsible'   => TRUE,
    '#title'         => t('project.module integration'),
    '#type'          => 'fieldset',
  );
  $form['bot_project_project']['bot_project_project_enable'] = array(
    '#default_value' => variable_get('bot_project_project_enable', FALSE),
    '#title'         => t('Enable project.module issue lookups'),
    '#type'          => 'checkbox',
  );
  $form['bot_project_project']['bot_project_project_url_regexp'] = array(
    '#default_value' => variable_get('bot_project_project_url_regexp', NULL),
    '#description'   => t('Lookup issues when matched in conversation (ex. %example).', array('%example' => 'http://[\w\d\-]*?\.?drupal\.org/node/\d+')),
    '#title'         => t('URL regexp for issue lookups'),
    '#type'          => 'textfield',
  );
  $form['bot_project_project']['bot_project_project_url'] = array(
    '#default_value' => variable_get('bot_project_project_url', NULL),
    '#description'   => t('Define the base URL used with node ID issue lookups (ex. %example).', array('%example' => 'http://drupal.org/')),
    '#title'         => t('Base URL (for node ID lookups)'),
    '#type'          => 'textfield',
  );
  $form['bot_project_project']['bot_project_project_nid_min'] = array(
    '#default_value' => variable_get('bot_project_project_nid_min', 0),
    '#description'   => t('Lookup issues ("#1234" or "1234" as the entire message) at the base URL larger than this node ID.'),
    '#title'         => t('Minimum node ID for lookups'),
    '#type'          => 'textfield',
  );
  $form['bot_project_project']['bot_project_project_nid_max'] = array(
    '#default_value' => variable_get('bot_project_project_nid_max', 99999),
    '#description'   => t('Lookup issues ("#1234" or "1234" as the entire message) at the base URL smaller than this node ID.'),
    '#title'         => t('Maximum node ID for lookups'),
    '#type'          => 'textfield',
  );

  $form['bot_project_trac'] = array(
    '#collapsible'   => TRUE,
    '#title'         => t('Trac integration'),
    '#type'          => 'fieldset',
  );
  $form['bot_project_trac']['bot_project_trac_enable'] = array(
    '#default_value' => variable_get('bot_project_trac_enable', FALSE),
    '#title'         => t('Enable Trac lookups'),
    '#type'          => 'checkbox',
  );
  $form['bot_project_trac']['bot_project_trac_url_regexp'] = array(
    '#default_value' => variable_get('bot_project_trac_url_regexp', NULL),
    '#description'   => t('Lookup data when matched in conversation (ex. %example).', array('%example' => 'http://www.example.com/trac/(changeset|ticket)/\d+')),
    '#title'         => t('URL regexp for data lookups'),
    '#type'          => 'textfield',
  );
  $form['bot_project_trac']['bot_project_trac_url'] = array(
    '#default_value' => variable_get('bot_project_trac_url', NULL),
    '#description'   => t('Define the base URL used with numerical lookups (ex. %example).', array('%example' => 'http://www.example.com/trac/')),
    '#title'         => t('Base URL (for numerical lookups)'),
    '#type'          => 'textfield',
  );
  $form['bot_project_trac']['bot_project_trac_num_min'] = array(
    '#default_value' => variable_get('bot_project_trac_num_min', 0),
    '#description'   => t('Lookup data ("#1234", "1234", or "r1234" as the entire message) at the base URL larger than this number.'),
    '#title'         => t('Minimum numerical value for lookups'),
    '#type'          => 'textfield',
  );
  $form['bot_project_trac']['bot_project_trac_num_max'] = array(
    '#default_value' => variable_get('bot_project_trac_num_max', 99999),
    '#description'   => t('Lookup data ("#1234", "1234", or "r1234" as the entire message) at the base URL smaller than this number.'),
    '#title'         => t('Maximum numerical for lookups'),
    '#type'          => 'textfield',
  );

  return system_settings_form($form);
}
